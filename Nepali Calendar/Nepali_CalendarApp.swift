//
//  Nepali_CalendarApp.swift
//  Nepali Calendar
//
//  Created by mac on 14/09/2024.
//

import SwiftUI
import Foundation



struct NepaliDate {
    var year = 0
    var month = 0
    var date = 0
    var day = ""
    var nmonth = ""
    var num_day = 0
}

struct NepaliCalendar {
    static let MIN_AD_YEAR = 1944
    static let MAX_AD_YEAR = 2033
    static let MIN_BS_YEAR = 2000
    static let MAX_BS_YEAR = 2089
    
    static let BS: [[Int]] = [
        [2000,30,32,31,32,31,30,30,30,29,30,29,31],
        [2001,31,31,32,31,31,31,30,29,30,29,30,30],
        [2002,31,31,32,32,31,30,30,29,30,29,30,30],
        [2003,31,32,31,32,31,30,30,30,29,29,30,31],
        [2004,30,32,31,32,31,30,30,30,29,30,29,31],
        [2005,31,31,32,31,31,31,30,29,30,29,30,30],
        [2006,31,31,32,32,31,30,30,29,30,29,30,30],
        [2007,31,32,31,32,31,30,30,30,29,29,30,31],
        [2008,31,31,31,32,31,31,29,30,30,29,29,31],
        [2009,31,31,32,31,31,31,30,29,30,29,30,30],
        [2010,31,31,32,32,31,30,30,29,30,29,30,30],
        [2011,31,32,31,32,31,30,30,30,29,29,30,31],
        [2012,31,31,31,32,31,31,29,30,30,29,30,30],
        [2013,31,31,32,31,31,31,30,29,30,29,30,30],
        [2014,31,31,32,32,31,30,30,29,30,29,30,30],
        [2015,31,32,31,32,31,30,30,30,29,29,30,31],
        [2016,31,31,31,32,31,31,29,30,30,29,30,30],
        [2017,31,31,32,31,31,31,30,29,30,29,30,30],
        [2018,31,32,31,32,31,30,30,29,30,29,30,30],
        [2019,31,32,31,32,31,30,30,30,29,30,29,31],
        [2020,31,31,31,32,31,31,30,29,30,29,30,30],
        [2021,31,31,32,31,31,31,30,29,30,29,30,30],
        [2022,31,32,31,32,31,30,30,30,29,29,30,30],
        [2023,31,32,31,32,31,30,30,30,29,30,29,31],
        [2024,31,31,31,32,31,31,30,29,30,29,30,30],
        [2025,31,31,32,31,31,31,30,29,30,29,30,30],
        [2026,31,32,31,32,31,30,30,30,29,29,30,31],
        [2027,30,32,31,32,31,30,30,30,29,30,29,31],
        [2028,31,31,32,31,31,31,30,29,30,29,30,30],
        [2029,31,31,32,31,32,30,30,29,30,29,30,30],
        [2030,31,32,31,32,31,30,30,30,29,29,30,31],
        [2031,30,32,31,32,31,30,30,30,29,30,29,31],
        [2032,31,31,32,31,31,31,30,29,30,29,30,30],
        [2033,31,31,32,32,31,30,30,29,30,29,30,30],
        [2034,31,32,31,32,31,30,30,30,29,29,30,31],
        [2035,30,32,31,32,31,31,29,30,30,29,29,31],
        [2036,31,31,32,31,31,31,30,29,30,29,30,30],
        [2037,31,31,32,32,31,30,30,29,30,29,30,30],
        [2038,31,32,31,32,31,30,30,30,29,29,30,31],
        [2039,31,31,31,32,31,31,29,30,30,29,30,30],
        [2040,31,31,32,31,31,31,30,29,30,29,30,30],
        [2041,31,31,32,32,31,30,30,29,30,29,30,30],
        [2042,31,32,31,32,31,30,30,30,29,29,30,31],
        [2043,31,31,31,32,31,31,29,30,30,29,30,30],
        [2044,31,31,32,31,31,31,30,29,30,29,30,30],
        [2045,31,32,31,32,31,30,30,29,30,29,30,30],
        [2046,31,32,31,32,31,30,30,30,29,29,30,31],
        [2047,31,31,31,32,31,31,30,29,30,29,30,30],
        [2048,31,31,32,31,31,31,30,29,30,29,30,30],
        [2049,31,32,31,32,31,30,30,30,29,29,30,30],
        [2050,31,32,31,32,31,30,30,30,29,30,29,31],
        [2051,31,31,31,32,31,31,30,29,30,29,30,30],
        [2052,31,31,32,31,31,31,30,29,30,29,30,30],
        [2053,31,32,31,32,31,30,30,30,29,29,30,30],
        [2054,31,32,31,32,31,30,30,30,29,30,29,31],
        [2055,31,31,32,31,31,31,30,29,30,29,30,30],
        [2056,31,31,32,31,32,30,30,29,30,29,30,30],
        [2057,31,32,31,32,31,30,30,30,29,29,30,31],
        [2058,30,32,31,32,31,30,30,30,29,30,29,31],
        [2059,31,31,32,31,31,31,30,29,30,29,30,30],
        [2060,31,31,32,32,31,30,30,29,30,29,30,30],
        [2061,31,32,31,32,31,30,30,30,29,29,30,31],
        [2062,30,32,31,32,31,31,29,30,29,30,29,31],
        [2063,31,31,32,31,31,31,30,29,30,29,30,30],
        [2064,31,31,32,32,31,30,30,29,30,29,30,30],
        [2065,31,32,31,32,31,30,30,30,29,29,30,31],
        [2066,31,31,31,32,31,31,29,30,30,29,29,31],
        [2067,31,31,32,31,31,31,30,29,30,29,30,30],
        [2068,31,31,32,32,31,30,30,29,30,29,30,30],
        [2069,31,32,31,32,31,30,30,30,29,29,30,31],
        [2070,31,31,31,32,31,31,29,30,30,29,30,30],
        [2071,31,31,32,31,31,31,30,29,30,29,30,30],
        [2072,31,32,31,32,31,30,30,29,30,29,30,30],
        [2073,31,32,31,32,31,30,30,30,29,29,30,31],
        [2074,31,31,31,32,31,31,30,29,30,29,30,30],
        [2075,31,31,32,31,31,31,30,29,30,29,30,30],
        [2076,31,32,31,32,31,30,30,30,29,29,30,30],
        [2077,31,32,31,32,31,30,30,30,29,30,29,31],
        [2078,31,31,31,32,31,31,30,29,30,29,30,30],
        [2079,31,31,32,31,31,31,30,29,30,29,30,30],
        [2080,31,32,31,32,31,30,30,30,29,29,30,30],
        [2081,31,32,31,32,31,30,30,30,29,30,29,31],
        [2082,30,32,31,32,31,30,30,30,29,30,30,30],
        [2083,31,31,32,31,31,30,30,30,29,30,30,30],
        [2084,31,31,32,31,31,30,30,30,29,30,30,30],
        [2085,31,32,31,32,30,31,30,30,29,30,30,30],
        [2086,30,32,31,32,31,30,30,30,29,30,30,30],
        [2087,31,31,32,31,31,31,30,30,29,30,30,30],
        [2088,30,31,32,32,30,31,30,30,29,30,30,30],
        [2089,30,32,31,32,31,30,30,30,29,30,30,30],
        [2090,30,32,31,32,31,30,30,30,29,30,30,30]
    ]
    
    static func engToNep(yy: Int, mm: Int, dd: Int) -> NepaliDate {
        
        let month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        let lmonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
        
        let defEyy = 1944
        let defNyy = 2000
        let defNmm = 9
        let defNdd = 17 - 1
        var totalEDays = 0
        var totalNDays = 0
        var a = 0
        var day = 7 - 1
        var m = 0
        var y = 0
        var i = 0
        var j = 0
        var numDay = 0
        
        for i in 0..<(yy - defEyy) {
            if isLeapYear(defEyy + i) {
                totalEDays += lmonth.reduce(0, +)
            } else {
                totalEDays += month.reduce(0, +)
            }
        }
        
        for i in 0..<(mm - 1) {
            if isLeapYear(yy) {
                totalEDays += lmonth[i]
            } else {
                totalEDays += month[i]
            }
        }
        
        totalEDays += dd
        
        i = 0
        j = defNmm
        totalNDays = defNdd
        m = defNmm
        y = defNyy
        
        while totalEDays != 0 {
            a = BS[i][j]
            totalNDays += 1
            day += 1
            
            if totalNDays > a {
                m += 1
                totalNDays = 1
                j += 1
            }
            
            if day > 7 {
                day = 1
            }
            
            if m > 12 {
                y += 1
                m = 1
            }
            
            if j > 12 {
                j = 1
                i += 1
            }
            
            totalEDays -= 1
        }
        
        numDay = day
        var nepDate = NepaliDate()
        nepDate.year = y
        nepDate.month = m
        nepDate.date = totalNDays
        nepDate.day = getDayOfWeek(day)
        nepDate.nmonth = getNepaliMonth(m)
        nepDate.num_day = numDay
        
        return nepDate
    }
    
    static func isLeapYear(_ year: Int) -> Bool {
        if year % 100 == 0 {
            return year % 400 == 0
        } else {
            return year % 4 == 0
        }
    }
    
    static func isInRangeEng(year: Int, month: Int, day: Int) -> Bool {
        guard year >= MIN_AD_YEAR && year <= MAX_AD_YEAR else {
            return false
        }
        guard month >= 1 && month <= 12 else {
            return false
        }
        guard day >= 1 && day <= 31 else {
            return false
        }
        return true
    }
    
    static func getDayOfWeek(_ day: Int) -> String {
        let days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
        return days[day - 1]
    }
    
    static func getNepaliMonth(_ month: Int) -> String {
        let months: [String] = ["Baishak", "Jestha", "Ashad", "Shrawn",
                      "Bhadra", "Ashwin", "Kartik", "Mangshir",
                      "Poush", "Magh", "Falgun", "Chaitra"]
        return months[month - 1]
    }
    
}





@main
struct Nepali_CalendarApp: App {
    @State private var currentDate = Date()
    let timer = Timer.publish(every: 1, on: .main, in: .common).autoconnect()
    
 
    
    var formattedNepaliDate: String {
        let calendar = Calendar.current
        let components = calendar.dateComponents([.year, .month, .day], from: currentDate)
        let nepaliDate = NepaliCalendar.engToNep(yy: components.year!, mm: components.month!, dd: components.day!)
        return "\(nepaliDate.day) \(nepaliDate.date) \(nepaliDate.nmonth), \(nepaliDate.year)"
    }

    var body: some Scene {
        MenuBarExtra("\(formattedNepaliDate)") {
          
        }
      
       
    }
}
